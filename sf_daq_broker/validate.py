import os
from glob import glob


##TODO: use message templates?
#TEMPL_MISSING_PARAM = "no {what} provided in the request parameters"


# just check truthiness

def request(req):
    if not req:
        raise RuntimeError("no request parameters provided")

def remote_ip(ri):
    if not ri:
        raise RuntimeError("no requester network IP provided")

def beamline(bl):
    if not bl:
        raise RuntimeError("cannot match requester network IP to beamline")

def allowed_detectors_beamline(adb):
    if not adb:
        raise RuntimeError("no detectors configured for this beamline")

def detector_name(dn):
    if not dn:
        raise RuntimeError('no "detector_name" provided in the request parameters')

def detectors(ds):
    if not ds:
        raise RuntimeError('no "detectors" provided in the request parameters')



##TODO: use generic truthiness check?

#def true(what, message):
#    if not what:
#        raise RuntimeError(message)

#def request(req):
#    true(req, "request parameters are empty")



# check more complex things

def request_has_pgroup(req):
    if "pgroup" not in req:
        raise RuntimeError('no "pgroup" provided in the request parameters')

def path_to_pgroup_exists(ptp):
    if not os.path.exists(ptp):
        raise RuntimeError(f"pgroup directory {ptp} not reachable")

def pgroup_is_not_closed_yet(dd, ptp):
    if os.path.exists(f"{dd}/CLOSED"):
        raise RuntimeError(f"pgroup directory {ptp} is already closed for writing")

def epics_config_file_exists(cf, bl):
    if not os.path.exists(cf):
        raise RuntimeError(f"epics buffer config file {cf} does not exist for beamline {bl}")

def pgroup_is_not_closed(dd, ptp):
    if os.path.exists(f"{dd}/CLOSED"):
        raise RuntimeError(f"pgroup directory {ptp} is closed for writing")

def detector_name_in_allowed_detectors_beamline(dn, adb, bl):
    if dn not in adb:
        raise RuntimeError(f"detector {dn} does not belong to beamline {bl}")

def all_detector_names_in_allowed_detectors_beamline(dns, adb, bl):
    for dn in dns:
        detector_name_in_allowed_detectors_beamline(dn, adb, bl)

def request_has_detectors(req):
    if "detectors" not in req:
        raise RuntimeError('no "detectors" provided in the request parameters')

def request_has_pulseids(req):
    if "start_pulseid" not in req:
        raise RuntimeError('no "start_pulseid" provided in the request parameters')
    if "stop_pulseid" not in req:
        raise RuntimeError('no "stop_pulseid" provided in the request parameters')

def allowed_pulseid_range(pid_start, pid_stop):
    delta = pid_stop - pid_start
    max_delta = 60001
    if delta > max_delta:
        raise RuntimeError(f"requested number of pulses {delta} too large (max. {max_delta})")
    if delta < 0:
        raise RuntimeError(f"requested number of pulses {delta} negative")

def rate_multiplicator(rm):
    allowed = [1, 2, 4, 8, 10, 20, 40, 50, 100]
    if rm not in allowed:
        raise RuntimeError('"rate_multiplicator" not from allowed values {allowed}')

def allowed_run_number(rn, ckrn):
    if rn > ckrn:
        raise RuntimeError(f'requested "run_number" {rn:04} not generated by sf-daq')

def tag_matching_previous(ptp, rn, rd, ut):
    runs = glob(f"{ptp}/run{rn:04}*")
    if runs and f"{ptp}{rd}" not in runs:
        raise RuntimeError(f"run {rn:04} exists already but with different tag(s) {runs} than the requested {ut}")

def request_detectors_is_dict(rd):
    if not isinstance(rd, dict):
        raise RuntimeError(f'"detectors" provided in the request parameters ({rd}) is not a dictionary')

def dap_parameters_file_exists(dpf):
    if not os.path.exists(dpf):
        raise RuntimeError(f"DAP parameter file {dpf} does not exist")

def request_has_run_number(rn):
    if rn is None:
        raise RuntimeError('no "run_number" provided in the request parameters')

def run_dir_exists(lddr, rn):
    if not lddr:
        raise RuntimeError(f"run {rn:04} does not exist in this pgroup")



# checks with side effects -- move somewhere else? refactor logic?

def directory_exists(pd):
    if not os.path.exists(pd):
        try:
            os.makedirs(pd)
        except Exception as e:
            raise RuntimeError(f"cannot create directory {pd} (due to: {e})") from e

def request_has_integer_pulseids(req):
    try:
        req["start_pulseid"] = int(req["start_pulseid"])
    except Exception as e:
        raise RuntimeError(f'bad "start_pulseid" provided in the request parameters (due to: {e})') from e
    try:
        req["stop_pulseid"]  = int(req["stop_pulseid"])
    except Exception as e:
        raise RuntimeError(f'bad "stop_pulseid" provided in the request parameters (due to: {e})') from e



